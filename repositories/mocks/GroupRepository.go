// Code generated by mockery v2.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/bradenrayhorn/switchboard-core/models"
	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// GroupRepository is an autogenerated mock type for the GroupRepository type
type GroupRepository struct {
	mock.Mock
}

// CreateGroup provides a mock function with given fields: groupName, userIds
func (_m *GroupRepository) CreateGroup(groupName *string, userIds []primitive.ObjectID) (*models.Group, error) {
	ret := _m.Called(groupName, userIds)

	var r0 *models.Group
	if rf, ok := ret.Get(0).(func(*string, []primitive.ObjectID) *models.Group); ok {
		r0 = rf(groupName, userIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*string, []primitive.ObjectID) error); ok {
		r1 = rf(groupName, userIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroup provides a mock function with given fields: group
func (_m *GroupRepository) DeleteGroup(group *models.Group) error {
	ret := _m.Called(group)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Group) error); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGroup provides a mock function with given fields: groupId, userId
func (_m *GroupRepository) GetGroup(groupId primitive.ObjectID, userId primitive.ObjectID) (*models.Group, error) {
	ret := _m.Called(groupId, userId)

	var r0 *models.Group
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, primitive.ObjectID) *models.Group); ok {
		r0 = rf(groupId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(groupId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroups provides a mock function with given fields: userId
func (_m *GroupRepository) GetGroups(userId primitive.ObjectID) ([]models.Group, error) {
	ret := _m.Called(userId)

	var r0 []models.Group
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) []models.Group); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupExists provides a mock function with given fields: userIds
func (_m *GroupRepository) GroupExists(userIds []primitive.ObjectID) (bool, error) {
	ret := _m.Called(userIds)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]primitive.ObjectID) bool); ok {
		r0 = rf(userIds)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]primitive.ObjectID) error); ok {
		r1 = rf(userIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: group
func (_m *GroupRepository) UpdateGroup(group *models.Group) error {
	ret := _m.Called(group)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Group) error); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
